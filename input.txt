{Total test cases:  41
 Test passed:test_cases\Basic_Constucts\For_Loop_Testing1.txt
 Test passed:test_cases\Basic_Constucts\For_Loop_Testing2.txt
 Test passed:test_cases\Basic_Constucts\For_Loop_Testing3.txt
 Test passed:test_cases\Basic_Constucts\Multiple_If_Else_Testing.txt
 Test passed:test_cases\Basic_Constucts\Multiple_If_Else_Testing2.txt
 Test passed:test_cases\Basic_Constucts\Multiple_If_Else_Testing_with_Return.txt
 Test passed:test_cases\Eulers_Problems\Digit_Fifth_Power.txt
 Test passed:test_cases\Eulers_Problems\Even_Fibonacci.txt
 Test passed:test_cases\Eulers_Problems\Highly_Divisible_Triangular_Number.txt
 Test passed:test_cases\Eulers_Problems\Largest_Palindrome_Product.txt
 Test passed:test_cases\Eulers_Problems\Largest_Prime_Factor.txt
 Test passed:test_cases\Eulers_Problems\Multiples_of_3_or_5.txt
 Test passed:test_cases\Eulers_Problems\Smallest_Multiple.txt
 Test passed:test_cases\Eulers_Problems\Special_Pythagorean_Triplet.txt
 Test passed:test_cases\Eulers_Problems\sum_of_two_million_primes.txt
 Test passed:test_cases\Eulers_Problems\Sum_Square_Difference.txt
 Test passed:test_cases\Factorial_of_n.txt
 Test passed:test_cases\Fibonacci.txt
 Test passed:test_cases\Fibonacci_Recursive.txt
 Test passed:test_cases\fizz\fizz_buzz.txt
 Test failed:test_cases\Functions\First_Class_Functions\First_Class_Function_Testing.txt
 Test failed:test_cases\Functions\First_Class_Functions\First_Class_Function_Testing2.txt
 Test failed:test_cases\Functions\First_Class_Functions\Function_Testing_Function_into_Function.txt
 Test passed:test_cases\Functions\Function_Binding_Testing.txt
 Test passed:test_cases\Functions\Function_Testing.txt
 Test passed:test_cases\Functions\Recursion\Mutual_Recursion_Testing.txt
 Test passed:test_cases\Functions\Recursion\Mutual_Recursion_Testing2.txt
 Test passed:test_cases\Functions\Recursion\Recursive_Function_Testing.txt
 Test passed:test_cases\Resolver_Testing\Resolver_Testing.txt
 Test passed:test_cases\Resolver_Testing\Resolver_Testing2.txt
 Test passed:test_cases\Scoping\Test1.txt
 Test failed:test_cases\Scoping\Test2.txt
 Test passed:test_cases\Scoping\Test3.txt
 Test failed:test_cases\Scoping\Test4.txt
 Test failed:test_cases\String_List_Testing\IncrementDecrement_testcases.txt
 Test passed:test_cases\String_List_Testing\int_array_test.txt
 Test passed:test_cases\String_List_Testing\String_op_testcases.txt
 Test passed:test_cases\Syntax\Syntax_Testing.txt
 Test passed:test_cases\Syntax\Syntax_Testing2.txt
 Test passed:test_cases\Syntax\Testing_Print.txt
 Test passed:test_cases\Syntax\Token_Parser_Testing.txt
Passed Count: 35 Failed Count: 6
Time taken:  169.12761449813843}

{max := ~0 ;
maxval := ~0;
pathMaxFound := ~0;
i := ~0 ;
limit := ~1000; 
listing := LIST:INTEGER[]; 

WHILE i < limit DO 
    BEGIN
        APPEND(listing,~0);
        i:=i+1;
    END
END

i := ~1;

WHILE i <= limit DO  
    BEGIN
        n := i;
        count := ~1;
        flag := 1; {if flag=0, some value in cache}
        stack := LIST:INTEGER[];

        WHILE n > 1 DO
            BEGIN
                IF n < i && listing[n-1] <> ~0 THEN
                    BEGIN
                        count := count + listing[n-1] - ~1;
                        flag := 0;
                        BREAK;
                    END
                ELSE END

                IF n % 2 = 0 THEN
                    n := n / 2;
                ELSE
                    n := 3 * n + ~1;
                END
                count := count + ~1;

                IF n < LEN(listing) THEN
                    BEGIN
                        IF listing[n-1] <> ~0 THEN
                            BEGIN
                                count := count + listing[n-1] - ~1;
                                LISTUPDATE(listing[n-1],count);
                                flag := 0;
                                discount := count - ~1;
                                k := LEN(stack);
                                j := 1;

                                WHILE j < k DO
                                    BEGIN
                                        IF listing[stack[j-1]-1] = ~0 THEN
                                            BEGIN
                                                LISTUPDATE(listing[stack[j-1]-1],discount);
                                                discount := discount - ~1;
                                            END
                                        ELSE END

                                        j := j + 1;
                                    END
                                END
                            END
                        ELSE
                            BEGIN
                                APPEND(stack,n);
                            END
                        END
                    END
                ELSE
                    BEGIN
                        pathMaxFound := n;
                        j := LEN(listing);
                        WHILE j < n DO
                            BEGIN
                                APPEND(listing,~0);
                                j := j + 1;
                            END
                        END

                        APPEND(stack,n);
                    END
                END
    
            END
        END
        IF count > max THEN
            BEGIN
                max := count;
                maxval := i;
            END
        ELSE END
        i := i + 1;
    END
END

PRINT("Max length: ");
PRINT(max);
PRINT("Max value for which path longest: ");
PRINT(maxval);
PRINT("Max value found during path: ");
PRINT(pathMaxFound);}

{Euler 14 - Longest Collatz sequence - memoisation with list and whileloop}
{max := ~0 ;
maxval := ~0;
pathMaxFound := ~0;
i := ~0 ;
limit := ~1000; {Bytecode without memoisation: 100->119,97->1.22s/0.36s, 1000->179,871->2.28s/5.76s, 10000->262,6171->31.71s/78.15s, 100000->351,77031->403s/1004s, 1000000->525,837799->}
{Bytecode with partial memo: 100->119,97->0.4s, 1000->179,871->6.78s, 10000->262,6171->31.71s, 100000->351,77031->, 1000000->525,837799->}
{Bytecode with full memo: 100->119,97->0.58s, 1.38s(list as tuple), 1000->179,871->10.42s(list as list), 396s(list as tuple), 10000->262,6171->761.74s(list as list), 100000->351,77031->403s, 1000000->->}
{Bytecode with full memo, tuple concat: 100->119,97->0.815s, 1000->179,871->196s, 10000->262,6171->, 100000->351,77031->, 1000000->525,837799->}
{sim with full memo: 100->119,97->59.3s, 1000->179,871->, 10000->262,6171->, 100000->351,77031->403s, 1000000->525,837799->}
{sim with full memo, reject outer limit: 100->119,97->107s/83s, 1000->179,871->, 10000->262,6171->, 100000->351,77031->403s, 1000000->525,837799->}
listing := LIST:INTEGER[]; 
WHILE i<limit
DO 
    BEGIN
    APPEND(listing,~0);
    i:=i+1;
    END
END
PRINT("Initial length of list: ");
PRINT(LEN(listing));
i:=~1;
WHILE i <= limit
DO  
    BEGIN
        n:=i;
        count:=~1;
        flag:=1; {if flag=0, some value in cache}
        stack:=LIST:INTEGER[];
        WHILE n>1
        DO
            BEGIN
                {IF n=368 || n=61
                THEN PRINT(n);
                ELSE END}
                IF n%2 = 0
                THEN
                    n := n/2;
                ELSE
                    n:= 3*n+~1;
                END
                count:= count+~1;
                
                IF n<LEN(listing)
                THEN
                    BEGIN
                        {PRINT("n: ");
                        PRINT(n);
                        PRINT(listing);
                        PRINT(count);}
                        IF listing[n-1] <> ~0
                        THEN
                            BEGIN
                                {PRINT("Cache hit: ");
                                PRINT(count);
                                PRINT(listing[n-1]);}
                                count:=count+listing[n-1]-~1;
                                LISTUPDATE(listing[n-1],count);
                                flag:=0;
                                discount:=count-~1;
                                k:=LEN(stack);
                                j:=1;
                                WHILE j<k
                                DO
                                    BEGIN
                                        IF listing[stack[j-1]-1] = ~0
                                        THEN
                                            BEGIN
                                                {PRINT("Updating: ");
                                                PRINT(stack[j-1]);
                                                PRINT(listing[stack[j-1]-1]);
                                                PRINT(listing);
                                                PRINT(stack);}
                                                LISTUPDATE(listing[stack[j-1]-1],discount);
                                                discount:=discount-~1;
                                            END
                                        ELSE END
                                        j:=j+1;
                                    END
                                END
                                
                                BREAK;
                            END
                        ELSE
                            BEGIN
                                {PRINT("stack");
                                PRINT(stack);}
                                APPEND(stack,n);
                                {PRINT(stack);}
                            END
                        
                        END
                    END
                ELSE
                    BEGIN
                        pathMaxFound:=n;
                        j:=LEN(listing);
                        WHILE j<n
                        DO
                            BEGIN
                                APPEND(listing,~0);
                                j:=j+1;
                            END
                        END
                        {PRINT("stack");
                        PRINT(stack);}
                        APPEND(stack,n);
                        {PRINT(stack);}
                    END
                END

                
                {IF flag=1
                THEN
                count:= count+~1;
                ELSE END}
                
                
            END
        END
        {PRINT("Count: ");
        PRINT(count);}
        {LISTUPDATE(listing[i-1],count);}
        {PRINT(listing);}
        {IF flag=1
        THEN
            count:=~1;
        ELSE END}
        
        IF count> max
        THEN
            BEGIN
            max:=count;
            maxval := i;
            END
        ELSE 
        END
        i:=i+1;
    END
END
PRINT("Max length: ");
PRINT(max);
PRINT("Max value for which path longest: ");
PRINT(maxval);
{PRINT("Final length of listing: ");
PRINT(LEN(listing));}
PRINT("Max value found during path: ");
PRINT(pathMaxFound);
{PRINT(listing);}}

{without memoisation}
max := 0 ;
maxval := 0;
i := 1 ;
limit := 100000;
WHILE i <= limit
DO  
    BEGIN
    n:=i;
    count:=1;
    WHILE n>1
    DO
    BEGIN
        IF n%2 = 0
        THEN
            n := n/2;
        ELSE
            n:= 3*n+1;
        END
        count:= count+1;
    END
    END
    IF count>= max
    THEN
        BEGIN
        max:=count;
        maxval := i;
        END
    ELSE 
    END
    i:=i+1;
    END
END
PRINT(max);
PRINT(maxval);


{l := LIST[~7, ~2, ~4, ~10, ~8];
LISTUPDATE(l[3],~10);
PRINT(l);
LISTUPDATE(l[1:3],[~0,~0]);
PRINT(l);}

{with memoisation but only list}
{FUNCTION csl(n,cache)
BEGIN
    IF n = 1
        THEN RETURN cache[0];
        ELSE END
    IF (n < LEN(cache) && cache[n-1] <> ~0)
        THEN RETURN cache[n-1];
        ELSE END
    IF n % 2 = 0
        THEN length := (csl(n/2,cache) + ~1);
        ELSE length := (csl(n*3+1,cache) + ~1);
             END
    IF n < LEN(cache)
        THEN BEGIN
            r := n-1;
            LISTUPDATE(cache[r],length);
            END
        ELSE END
    IF n = LEN(cache)
        THEN APPEND(cache, length);
        ELSE
            BEGIN
            j:=0;
            WHILE j<(n - LEN(cache))
                DO
                    BEGIN
                        APPEND(cache,~0);
                        j:=j+1; 
                    END
                END
            s := n-1;
            LISTUPDATE(cache[s],length);
            END
            END      
    RETURN length;
END

maxl := ~0;
maxn := 0;
cache := LIST:INTEGER[~1];
i:=10;
n:=1;
WHILE n <= i
DO
BEGIN
    len := csl(n,cache);
    IF len > maxl
        THEN BEGIN
            maxl:=len;
            maxn:=n;
            END
        ELSE
            END
    {PRINT("before");
    PRINT(n);}
    n+=1;
    {PRINT("after");
    PRINT(n);}
END
END
PRINT (maxl);
PRINT (maxn);
}




